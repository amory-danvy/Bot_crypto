"""
Strat√©gie DCA (Dollar Cost Averaging) intelligente bas√©e sur le RSI
"""
import asyncio
import logging
from datetime import datetime, timedelta
from typing import Dict, Optional
import json
from pathlib import Path

import config
from utils.binance_client import get_binance_client
from utils.indicators import calculate_rsi, extract_prices_from_klines, get_buy_signal_strength
from utils.notifications import get_notification_manager

logger = logging.getLogger(__name__)


class DCAStrategy:
    """Strat√©gie DCA intelligente"""

    def __init__(self):
        self.enabled = config.DCA_SETTINGS['enabled']
        self.client = get_binance_client()
        self.notif = get_notification_manager()

        # √âtat de la strat√©gie
        self.daily_spent = 0.0
        self.last_buy_date = None
        self.trades_history = []

        # Charger l'historique si existe
        self._load_history()

    def _load_history(self):
        """Charge l'historique des trades DCA"""
        try:
            if config.TRADES_FILE.exists():
                with open(config.TRADES_FILE, 'r') as f:
                    data = json.load(f)
                    self.trades_history = data.get('dca_trades', [])

                # Calculer le montant d√©pens√© aujourd'hui
                today = datetime.now().date()
                self.daily_spent = sum(
                    trade['amount']
                    for trade in self.trades_history
                    if datetime.fromisoformat(trade['timestamp']).date() == today
                )

                if self.daily_spent > 0:
                    self.last_buy_date = today

                logger.info(f"üìä Historique DCA charg√©: {len(self.trades_history)} trades, {self.daily_spent}‚Ç¨ d√©pens√©s aujourd'hui")

        except Exception as e:
            logger.error(f"‚ùå Erreur chargement historique DCA: {e}")
            self.trades_history = []

    def _save_history(self):
        """Sauvegarde l'historique des trades"""
        try:
            # Charger les donn√©es existantes
            data = {}
            if config.TRADES_FILE.exists():
                with open(config.TRADES_FILE, 'r') as f:
                    data = json.load(f)

            # Mettre √† jour les trades DCA
            data['dca_trades'] = self.trades_history

            # Sauvegarder
            with open(config.TRADES_FILE, 'w') as f:
                json.dump(data, f, indent=2)

            logger.debug("üíæ Historique DCA sauvegard√©")

        except Exception as e:
            logger.error(f"‚ùå Erreur sauvegarde historique DCA: {e}")

    def _reset_daily_counter(self):
        """Reset le compteur quotidien si on est un nouveau jour"""
        today = datetime.now().date()

        if self.last_buy_date and self.last_buy_date != today:
            logger.info(f"üìÖ Nouveau jour - Reset du compteur DCA (√©tait: {self.daily_spent}‚Ç¨)")
            self.daily_spent = 0.0
            self.last_buy_date = None

    def _get_buy_amount(self, rsi: float) -> float:
        """
        D√©termine le montant √† acheter bas√© sur le RSI

        Args:
            rsi: Valeur du RSI

        Returns:
            Montant en ‚Ç¨ √† acheter (0 si pas d'achat)
        """
        # Parcourir les niveaux RSI du plus bas au plus haut
        for rsi_threshold in sorted(config.DCA_SETTINGS['rsi_levels'].keys()):
            if rsi < rsi_threshold:
                return config.DCA_SETTINGS['rsi_levels'][rsi_threshold]

        # Si RSI trop √©lev√©, pas d'achat
        return 0.0

    async def _execute_buy(
        self,
        coin: str,
        amount: float,
        current_price: float,
        rsi: float
    ) -> bool:
        """
        Ex√©cute un achat DCA

        Args:
            coin: Symbole de la crypto (BTC, ETH)
            amount: Montant en ‚Ç¨
            current_price: Prix actuel
            rsi: Valeur du RSI

        Returns:
            True si succ√®s, False sinon
        """
        try:
            symbol = f"{coin}{config.BINANCE_CONFIG['quote_currency']}"

            logger.info(f"üí∞ Ex√©cution DCA: {amount}‚Ç¨ de {coin} @ ${current_price:,.2f} (RSI: {rsi:.1f})")

            # Placer l'ordre
            order = self.client.place_buy_order(symbol, amount)

            if not order:
                await self.notif.send_error(f"√âchec ordre DCA pour {coin}")
                return False

            # Enregistrer le trade
            trade = {
                'timestamp': datetime.now().isoformat(),
                'coin': coin,
                'symbol': symbol,
                'amount': amount,
                'price': current_price,
                'quantity': order.get('executedQty', amount / current_price),
                'rsi': rsi,
                'order_id': order.get('orderId'),
                'dry_run': config.TRADING_MODE == 'dry_run'
            }

            self.trades_history.append(trade)
            self._save_history()

            # Mettre √† jour les compteurs
            self.daily_spent += amount
            self.last_buy_date = datetime.now().date()

            # Notification
            await self.notif.send_dca_alert(
                coin=coin,
                rsi=rsi,
                amount=amount,
                price=current_price,
                executed=True
            )

            logger.info(f"‚úÖ DCA ex√©cut√© avec succ√®s: {trade['quantity']:.8f} {coin}")
            return True

        except Exception as e:
            logger.error(f"‚ùå Erreur ex√©cution DCA pour {coin}: {e}")
            await self.notif.send_error(f"Erreur DCA {coin}: {str(e)}")
            return False

    async def _check_coin(self, coin: str, allocation: float) -> Optional[Dict]:
        """
        V√©rifie une crypto et d√©termine s'il faut acheter

        Args:
            coin: Symbole de la crypto (BTC, ETH)
            allocation: Pourcentage d'allocation (0.0 - 1.0)

        Returns:
            Dict avec les infos si achat recommand√©, None sinon
        """
        try:
            symbol = f"{coin}{config.BINANCE_CONFIG['quote_currency']}"

            # R√©cup√©rer les donn√©es historiques
            klines = self.client.get_historical_klines(
                symbol=symbol,
                interval=config.DCA_SETTINGS['timeframe'],
                limit=100
            )

            if not klines:
                logger.warning(f"‚ö†Ô∏è Pas de donn√©es pour {coin}")
                return None

            # Extraire les prix de cl√¥ture
            prices_data = extract_prices_from_klines(klines)
            close_prices = prices_data['close']

            if not close_prices:
                logger.warning(f"‚ö†Ô∏è Pas de prix de cl√¥ture pour {coin}")
                return None

            # Calculer le RSI
            rsi = calculate_rsi(
                close_prices,
                period=config.DCA_SETTINGS['rsi_period']
            )

            current_price = close_prices[-1]

            # D√©terminer le montant d'achat bas√© sur le RSI
            buy_amount = self._get_buy_amount(rsi)

            # Ajuster selon l'allocation
            if buy_amount > 0:
                buy_amount = buy_amount * allocation

            logger.info(f"üìä {coin}: Prix=${current_price:,.2f}, RSI={rsi:.1f}, Signal={get_buy_signal_strength(rsi)}")

            # Retourner les infos si achat recommand√©
            if buy_amount >= config.DCA_SETTINGS['min_trade_amount']:
                return {
                    'coin': coin,
                    'symbol': symbol,
                    'price': current_price,
                    'rsi': rsi,
                    'amount': buy_amount,
                    'signal_strength': get_buy_signal_strength(rsi)
                }

            return None

        except Exception as e:
            logger.error(f"‚ùå Erreur v√©rification {coin}: {e}")
            return None

    async def run_check(self):
        """Ex√©cute une v√©rification DCA"""
        if not self.enabled:
            logger.debug("‚è∏Ô∏è Strat√©gie DCA d√©sactiv√©e")
            return

        try:
            logger.info("üîç === D√©but v√©rification DCA ===")

            # Reset le compteur si nouveau jour
            self._reset_daily_counter()

            # V√©rifier si on a d√©j√† atteint la limite quotidienne
            if self.daily_spent >= config.DCA_SETTINGS['max_daily_buy']:
                logger.info(f"‚è∏Ô∏è Limite quotidienne atteinte ({self.daily_spent}‚Ç¨/{config.DCA_SETTINGS['max_daily_buy']}‚Ç¨)")
                return

            # Budget restant pour aujourd'hui
            remaining_budget = config.DCA_SETTINGS['max_daily_buy'] - self.daily_spent

            # V√©rifier chaque coin
            opportunities = []

            for coin, allocation in config.DCA_SETTINGS['coins'].items():
                opportunity = await self._check_coin(coin, allocation)
                if opportunity:
                    opportunities.append(opportunity)

            # Trier par force du signal (RSI le plus bas en premier)
            opportunities.sort(key=lambda x: x['rsi'])

            if not opportunities:
                logger.info("‚úÖ Aucune opportunit√© DCA d√©tect√©e")
                return

            # Traiter les opportunit√©s
            for opp in opportunities:
                # V√©rifier le budget restant
                if remaining_budget < config.DCA_SETTINGS['min_trade_amount']:
                    logger.info(f"‚è∏Ô∏è Budget insuffisant pour continuer ({remaining_budget:.2f}‚Ç¨)")
                    break

                # Ajuster le montant si n√©cessaire
                buy_amount = min(opp['amount'], remaining_budget)

                logger.info(
                    f"üéØ Opportunit√© DCA: {opp['coin']} - "
                    f"RSI={opp['rsi']:.1f}, "
                    f"Prix=${opp['price']:,.2f}, "
                    f"Montant={buy_amount:.2f}‚Ç¨"
                )

                # Envoyer notification d'opportunit√©
                await self.notif.send_dca_alert(
                    coin=opp['coin'],
                    rsi=opp['rsi'],
                    amount=buy_amount,
                    price=opp['price'],
                    executed=False
                )

                # Ex√©cuter l'achat
                success = await self._execute_buy(
                    coin=opp['coin'],
                    amount=buy_amount,
                    current_price=opp['price'],
                    rsi=opp['rsi']
                )

                if success:
                    remaining_budget -= buy_amount
                    logger.info(f"üí∞ Budget restant: {remaining_budget:.2f}‚Ç¨")

                    # Respecter la limite: 1 achat max par jour
                    logger.info("‚è∏Ô∏è 1 achat par jour effectu√©, arr√™t de la strat√©gie DCA pour aujourd'hui")
                    break

                # Petite pause entre les ordres
                await asyncio.sleep(1)

            logger.info("üîç === Fin v√©rification DCA ===\n")

        except Exception as e:
            logger.error(f"‚ùå Erreur dans run_check DCA: {e}")
            await self.notif.send_error(f"Erreur DCA: {str(e)}")

    async def start(self):
        """D√©marre la strat√©gie DCA en boucle"""
        logger.info("üöÄ D√©marrage strat√©gie DCA")

        while self.enabled:
            try:
                await self.run_check()

                # Attendre l'intervalle configur√©
                interval = config.DCA_SETTINGS['check_interval']
                logger.info(f"‚è∞ Prochaine v√©rification DCA dans {interval / 3600:.1f}h")
                await asyncio.sleep(interval)

            except asyncio.CancelledError:
                logger.info("üõë Strat√©gie DCA arr√™t√©e")
                break
            except Exception as e:
                logger.error(f"‚ùå Erreur dans boucle DCA: {e}")
                await asyncio.sleep(60)  # Attendre 1 minute avant de r√©essayer

    def get_stats(self) -> Dict:
        """
        Retourne les statistiques de la strat√©gie

        Returns:
            Dict avec les stats
        """
        today = datetime.now().date()
        today_trades = [
            t for t in self.trades_history
            if datetime.fromisoformat(t['timestamp']).date() == today
        ]

        total_invested = sum(t['amount'] for t in self.trades_history)
        today_invested = sum(t['amount'] for t in today_trades)

        return {
            'total_trades': len(self.trades_history),
            'today_trades': len(today_trades),
            'total_invested': total_invested,
            'today_invested': today_invested,
            'daily_budget': config.DCA_SETTINGS['max_daily_buy'],
            'remaining_today': config.DCA_SETTINGS['max_daily_buy'] - self.daily_spent,
            'enabled': self.enabled
        }
